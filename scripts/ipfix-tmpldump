#!/usr/bin/env python3
#
# python-ipfix (c) 2013 Brian Trammell.
#
# Many thanks to the mPlane consortium (http://www.ict-mplane.eu) for
# its material support of this effort.
# 
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#

import ipfix.ie
import ipfix.reader
import ipfix.template
import ipfix.message
import ipfix.v9pdu

import argparse
import csv
import bz2

from sys import stdin, stdout, stderr

args = None

def parse_args():
    global args
    parser = argparse.ArgumentParser(description="Convert an IPFIX file or stream to CSV")
    parser.add_argument('--spec', '-s', metavar="specfile", action="append",
                        help="file to load additional IESpecs from")
    parser.add_argument('--file', '-f', metavar="file", nargs="?",
                        help="File to read (default stdin)")
    parser.add_argument('--bzip2', '-j', action="store_const", const=True,
                        help="Decompress bz2-compressed file")
    parser.add_argument('--netflow9', '-9', action="store_const", const=True,
                        help="Input is NetFlow V9 PDU file, not IPFIX")
    args = parser.parse_args()

def init_ipfix(specfiles = None):
    ipfix.ie.use_iana_default()
    ipfix.ie.use_5103_default()
    
    if specfiles:
        for sf in specfiles:
            ipfix.ie.use_specfile(sf)

def dump_template(msg, tmpl):
    if tmpl.scopecount:
        print("#\n# Options Template "+str(tmpl.tid)+" in domain "+str(msg.odid)+
              " ("+str(len(tmpl.ies))+" IEs)\n#")
    else:
        print("#\n# Template "+str(tmpl.tid)+" in domain "+str(msg.odid)+
              " ("+str(len(tmpl.ies))+" IEs)\n#")
            
    for i, ie in enumerate(tmpl.ies):
        if i < tmpl.scopecount:
            addl = "{scope}"
        else:
            addl = ""
        print(str(ie)+addl)

def dump_templates(instream):
    if args.netflow9:
        r = ipfix.v9pdu.from_stream(instream)
        r.add_template_hook = dump_template
    else:
        r = ipfix.reader.from_stream(instream)
        r.msg.add_template_hook = dump_template
        
    for rec in r.namedict_iterator():
        pass

# set "args" global
parse_args()

init_ipfix(args.spec)
if args.file:
    if args.bzip2:
        with bz2.open(args.file, mode="rb") as f:
            dump_templates(f)
    else:
        with open (args.file, mode="rb") as f:
            dump_templates(f)
else:
    stdin = stdin.detach()
    dump_templates(f)